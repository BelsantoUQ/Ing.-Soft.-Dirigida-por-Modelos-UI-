/**
 */
package uidiagram.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uidiagram.util.UidiagramAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UidiagramItemProviderAdapterFactory extends UidiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UidiagramItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.ModelFactory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelFactoryItemProvider modelFactoryItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.ModelFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelFactoryAdapter() {
		if (modelFactoryItemProvider == null) {
			modelFactoryItemProvider = new ModelFactoryItemProvider(this);
		}

		return modelFactoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.Ui_Diagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Ui_DiagramItemProvider ui_DiagramItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.Ui_Diagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUi_DiagramAdapter() {
		if (ui_DiagramItemProvider == null) {
			ui_DiagramItemProvider = new Ui_DiagramItemProvider(this);
		}

		return ui_DiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.UserInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserInterfaceItemProvider userInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.UserInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserInterfaceAdapter() {
		if (userInterfaceItemProvider == null) {
			userInterfaceItemProvider = new UserInterfaceItemProvider(this);
		}

		return userInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.ModelElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelElementItemProvider modelElementItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.ModelElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelElementAdapter() {
		if (modelElementItemProvider == null) {
			modelElementItemProvider = new ModelElementItemProvider(this);
		}

		return modelElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.GraphicalContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphicalContainerItemProvider graphicalContainerItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.GraphicalContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphicalContainerAdapter() {
		if (graphicalContainerItemProvider == null) {
			graphicalContainerItemProvider = new GraphicalContainerItemProvider(this);
		}

		return graphicalContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.Combo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComboItemProvider comboItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.Combo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComboAdapter() {
		if (comboItemProvider == null) {
			comboItemProvider = new ComboItemProvider(this);
		}

		return comboItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.MenuBar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuBarItemProvider menuBarItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.MenuBar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuBarAdapter() {
		if (menuBarItemProvider == null) {
			menuBarItemProvider = new MenuBarItemProvider(this);
		}

		return menuBarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.BorderLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BorderLayoutItemProvider borderLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.BorderLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBorderLayoutAdapter() {
		if (borderLayoutItemProvider == null) {
			borderLayoutItemProvider = new BorderLayoutItemProvider(this);
		}

		return borderLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.IndividualElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualElementItemProvider individualElementItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.IndividualElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualElementAdapter() {
		if (individualElementItemProvider == null) {
			individualElementItemProvider = new IndividualElementItemProvider(this);
		}

		return individualElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.Label} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.Label}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelAdapter() {
		if (labelItemProvider == null) {
			labelItemProvider = new LabelItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.TextInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextInputItemProvider textInputItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.TextInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextInputAdapter() {
		if (textInputItemProvider == null) {
			textInputItemProvider = new TextInputItemProvider(this);
		}

		return textInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.TexField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TexFieldItemProvider texFieldItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.TexField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTexFieldAdapter() {
		if (texFieldItemProvider == null) {
			texFieldItemProvider = new TexFieldItemProvider(this);
		}

		return texFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.Checkbox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckboxItemProvider checkboxItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.Checkbox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckboxAdapter() {
		if (checkboxItemProvider == null) {
			checkboxItemProvider = new CheckboxItemProvider(this);
		}

		return checkboxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AlertaDialog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlertaDialogItemProvider alertaDialogItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AlertaDialog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlertaDialogAdapter() {
		if (alertaDialogItemProvider == null) {
			alertaDialogItemProvider = new AlertaDialogItemProvider(this);
		}

		return alertaDialogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.SimpleDialog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleDialogItemProvider simpleDialogItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.SimpleDialog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleDialogAdapter() {
		if (simpleDialogItemProvider == null) {
			simpleDialogItemProvider = new SimpleDialogItemProvider(this);
		}

		return simpleDialogItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelFactoryItemProvider != null) modelFactoryItemProvider.dispose();
		if (ui_DiagramItemProvider != null) ui_DiagramItemProvider.dispose();
		if (userInterfaceItemProvider != null) userInterfaceItemProvider.dispose();
		if (modelElementItemProvider != null) modelElementItemProvider.dispose();
		if (graphicalContainerItemProvider != null) graphicalContainerItemProvider.dispose();
		if (comboItemProvider != null) comboItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (menuBarItemProvider != null) menuBarItemProvider.dispose();
		if (borderLayoutItemProvider != null) borderLayoutItemProvider.dispose();
		if (individualElementItemProvider != null) individualElementItemProvider.dispose();
		if (labelItemProvider != null) labelItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (textInputItemProvider != null) textInputItemProvider.dispose();
		if (texFieldItemProvider != null) texFieldItemProvider.dispose();
		if (checkboxItemProvider != null) checkboxItemProvider.dispose();
		if (alertaDialogItemProvider != null) alertaDialogItemProvider.dispose();
		if (simpleDialogItemProvider != null) simpleDialogItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
	}

}
